<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cli | Nate Dickson]]></title>
  <link href="http://PogiNate.github.com/blog/categories/cli/atom.xml" rel="self"/>
  <link href="http://PogiNate.github.com/"/>
  <updated>2013-09-17T10:09:11-06:00</updated>
  <id>http://PogiNate.github.com/</id>
  <author>
    <name><![CDATA[Nate Dickson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[From The Desk of Captain Obvious: Tmuxinator vs. Scripted configurations]]></title>
    <link href="http://PogiNate.github.com/blog/2013/05/10/from-the-desk-of-captain-obvious-tmuxinator-vs-scripted-configurations/"/>
    <updated>2013-05-10T10:38:00-06:00</updated>
    <id>http://PogiNate.github.com/blog/2013/05/10/from-the-desk-of-captain-obvious-tmuxinator-vs-scripted-configurations</id>
    <content type="html"><![CDATA[<p>I’ve been using <a href="https://github.com/aziz/tmuxinator">Tmuxinator</a> for a while now to put together tmux sessions that I can run quickly and easily from the command line. I’ve even set up an <a href="http://natedickson.com/blog/2013/04/12/introducing-a-dot-k-a-dot-the-alias-manager/">AKA</a> shortcut, abbreviating <code>tmuxinator</code> to <code>tor</code>, making it much easier to create new scripted sessions. But recently I discovered an odd thing when I detached from a session created by tmuxinator: they don’t show up in my list of sessions when I run <code>tmux ls</code>. </p>

<p>So I played with it a bit more. I could run <code>tor config1</code> and get a session laid out according to configuration 1. I’d then detach and create a session by hand, and do the following:</p>

<pre><code>$ tmux new -s bar -d
$ tmux ls
bar: 1 windows (created Thu May 9 07:35:02) [160x39]
</code></pre>

<p>Well that’s odd. So I’d try </p>

<pre><code>tmux attach -t config1
</code></pre>

<p>and it would say it can’t find the session.  Out of curiosity (did I kill the session instead of just detaching?) I’d run </p>

<pre><code>tor config1
</code></pre>

<p>again, and I would be back in my already-running session.</p>

<p>Okay, most of you have already gotten here ahead of me. When you run Tmuxinator it’s issuing commands from ruby, not from your user session. The tmux process that ruby uses is a child process of ruby, not of your shell. This is fine if you create all your sessions from Tmuxinator, but if you start standing up impromptu sessions just because, or if you have decided to have tmux start whenever your terminal opens it means that your Tmuxinator sessions and your non-Tmuxinator sessions are on totally different servers, so you can’t use <code>&lt;prefix&gt;)</code> to switch between them.</p>

<p>So I decided to bite the bullet and move my Tmuxinator sessions over to independently executable scripts. It’s more steps, not quite as pretty, but the commands are all sensible, and now sessions I create using my scripts are visible on my “main” tmux server. And I’m free of one more external dependency, which is nice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Battery Status in tmux]]></title>
    <link href="http://PogiNate.github.com/blog/2013/04/30/battery-status-in-tmux/"/>
    <updated>2013-04-30T10:25:00-06:00</updated>
    <id>http://PogiNate.github.com/blog/2013/04/30/battery-status-in-tmux</id>
    <content type="html"><![CDATA[<p>While I usually work plugged into power and a monitor and all that good stuff, there are times where my MacBook Pro and I need to go off the grid for a while. During those times I’ve found that it’s easiest to have a terminal window fullscreen and do everything via the command line. That way I don’t really need a mouse at all and I can keep my hands on the keyboard doing whatever it is I’m doing that day. If I need any of my GUI apps <a href="http://www.alfredapp.com/">Alfred</a> is always right there to help me out, again, without using the trackpad. </p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>What inspired me was a little section at the end of <a href="http://pragprog.com/book/bhtmux/tmux">Brian Hogan’s tmux book</a> about adding battery status to your status bar at the bottom of tmux windows. He links to <a href="https://raw.github.com/richoH/dotfiles/master/bin/battery">a script</a> that works cross platform, but that’s not really what I wanted. As Steve Jobs once said, if you’re working cross platform, you’re not getting the most out of your specific platform<sup id="fnref:kinda"><a href="#fn:kinda" rel="footnote">2</a></sup>. So I decided to write my own script.</p>

<p>doing a little bit of searching revealed this lovely command that appears to be OSX specific:</p>

<pre><code>pmset -g batt
</code></pre>

<p>running this will give you a result like this:</p>

<pre><code>Currently drawing from 'Battery Power'
  -InternalBattery-0     100%; discharging; 6:44 remaining
</code></pre>

<p>As you can see, this string is just begging to be pulled apart via regular expressions. So that’s exactly what I did. The first line is super easy to parse; there are only two possible strings (as near as I can tell) that go between the single quotes: </p>

<ul>
  <li>Battery Power</li>
  <li>AC Power</li>
</ul>

<p>So grabbing that string gives us a simple way to know where our energy is coming from. I didn’t want to just <em>say</em> “Battery” or “AC”, though, so I’m using the emoji for battery and lightning respectively<sup id="fnref:plug"><a href="#fn:plug" rel="footnote">3</a></sup>.</p>

<p>On the second line there are three things we want to know: how charged the battery is, if it’s charging or discharging (or charged) and how long until it’s done doing what it’s doing. I decided to represent the charge level of the battery using five stars, because that fits nicely and a 5-star system makes sense to people. I didn’t even need emoji for full or hollow stars, they’re part of UTF-8, so that was even easier. After a little thought I decided (for now) not to represent the charging/discharging/charged state specifically. I’m still capturing it, I’m just not displaying it.</p>

<p>So a few minutes of ruby hacking later and I have a script that gets me all the info I need and displays it using pretty pictures. Now all I need to do is get it into tmux. Fortunately that was also very simple. This line: </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Display Battery Info </span><a href='https://raw.github.com/PogiNate/dots/master/home/.tmux.conf'>Link to file on Github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> -g status-right “#<span class="o">[</span><span class="nb">fg</span><span class="o">=</span>colour155<span class="o">]</span><span class="c">#(pmset -g batt | ~/bin/battinfo.rb) | #[fg=colour45]%d %b %R”                                                        &lt;br /&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
runs the <code>pmset</code> command and my script and gives me a nice green row of stars and a cyan-ish date, like so:</p>

<p><img src="/assets/images/charged.png" title="Charged tmux status bar" ></p>

<p>And like so:</p>

<p><img src="/assets/images/battery.png" title="Battery power tmux status bar" ></p>

<p>It shows one star empty the moment the battery level falls below 100%, because of math, but I’m fine with that.</p>

<p>So: about an hour’s worth of work for something that will technically save me no time at all, ever. According to<a href="http://xkcd.com/1205/"> XKCD’s chart</a>, it wasn’t worth the time, but I’m still perfectly happy with it. I’m considering updating the script to be more tmux-specific, perhaps even coloring the output based on the charging state, but for now this is good and isn’t terribly distracting.</p>

<p>Anyway, the battinfo.rb script is below, my <code>.tmux.conf</code> file is on github with all <a href="https://github.com/PogiNate/dots">my other dot files</a>.</p>

<p><div><script src='https://gist.github.com/5490603.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<div class="footnotes">
  <ol>
    <li id="fn:minor">
      <p>very <em>very</em> minor<a href="#fnref:minor" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:kinda">
      <p>or <a href="http://www.apple.com/hotnews/thoughts-on-flash/">words to that effect</a>: “The third party may not adopt enhancements from one platform unless they are available on all of their supported platforms. Hence developers only have access to the lowest common denominator set of features.”<a href="#fnref:kinda" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:plug">
      <p>There is an emoji power plug symbol, but it doesn’t show up well on a black background.<a href="#fnref:plug" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing A.K.A.: The Alias Manager]]></title>
    <link href="http://PogiNate.github.com/blog/2013/04/12/introducing-a-dot-k-a-dot-the-alias-manager/"/>
    <updated>2013-04-12T11:33:00-06:00</updated>
    <id>http://PogiNate.github.com/blog/2013/04/12/introducing-a-dot-k-a-dot-the-alias-manager</id>
    <content type="html"><![CDATA[<p>One of the joys of moving from a Windows machine at work to OSX is that I’m back to having access to the unix command line. The downside, of course, long commands that I <a href="http://xkcd.com/1168/">usually get wrong</a>. </p>

<p>Which is why I spent some time a few weeks ago creating <a href="http://natedickson.com/A.K.A./">A.K.A.</a> Simply put, A.K.A. is a simple way to manage all the aliases that you usually put into your shell of choice’s startup file without editing your dot files by hand or cluttering up your profile when you could be cluttering up a completely separate file. </p>

<p>Now all you have to do is add <code>source ~/.alias</code> and use this script to keep everything nice and organized.</p>

<p>Again, it’s a simple difference; If you know what aliases are you probably aren’t afraid of editing dot files, but <code>aka</code> removes the friction of pulling up your favorite editor, finding where all your aliases are, saving, etc. Everything is a single command issued right at the prompt, all the saving and moving around is handled for you. The result is that I have far <strong>more</strong> aliases, and far more <strong>useful</strong> aliases, because I can add them or change them without breaking my flow. If I realize that I hate typing <code>git status</code> I just run <code>aka -a gs "git status"</code> and now I’ve got a much shorter version of that command. The downside, of course, is that I get intensely frustrated using anyone else’s computer where <code>gs</code> doesn’t work. But I can cope with that.</p>

<p>My favorite (slightly under-documented) command is <code>aka -L</code>, which outputs a nicely formatted list of all your aliases and what they do when you run them. It’s a simple thing, but I like it.</p>

<p>In the event that you actually decide to use this feel free to put suggestions or feature requests or comments either on this page’s comment line or on the <a href="https://github.com/PogiNate/A.K.A.">github page</a>. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux and Octopress]]></title>
    <link href="http://PogiNate.github.com/blog/2013/03/21/tmux-and-octopress/"/>
    <updated>2013-03-21T05:22:00-06:00</updated>
    <id>http://PogiNate.github.com/blog/2013/03/21/tmux-and-octopress</id>
    <content type="html"><![CDATA[<p>Naturally, the first thing I did after getting Octopress up, running, and actually <em>deployed</em> to a real live server was set up a writing workflow that will make it easy to post to this blog. And by “easy”, I of course mean “weird and convoluted, but in a way that makes sense to me”. What else would I mean?</p>

<p>The first ingredient in my workflow is <a href="http://tmux.sourceforge.net/">tmux</a>. If you haven’t played with it yet you’ll find that  it’s a fast and easy way to access your project from multiple angles. You’ll have one terminal window open and in that one window you can be editing a file, keeping an eye on <code>top</code> and running your build tasks all at once, while a second tab has your development server running in it. I discovered tmux using Brian Hogan’s <a href="http://pragprog.com/book/bhtmux/tmux">amazing book</a> and haven’t looked back. </p>

<p>The second part of the recipe here is <a href="https://github.com/aziz/tmuxinator">tmuxinator</a>, a nice little ruby app that lets you set up tmux layouts in <code>YAML</code> instead of writing the commands out as actual tmux commands, like so:</p>

<p><div><script src='https://gist.github.com/5212311.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>You can see I have <code>rake preview</code> and <code>top</code> running on a “background” tab, so I can preview the site, and <code>vim</code> running on the first tab with a couple of regular old <code>zsh</code> panes at the project root and at the <code>_posts</code> directory, so I can issue other commands to the system and use Marked.app to preview my posts, etc. etc.  </p>

<p>Obviously I haven’t been using this particular setup for all that long yet, but it’s got a lot of promise. I’m pleased with how it’s turning out.</p>
]]></content>
  </entry>
  
</feed>
