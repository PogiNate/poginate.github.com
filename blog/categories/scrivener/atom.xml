<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scrivener | Nate Dickson]]></title>
  <link href="http://natedickson.com/blog/categories/scrivener/atom.xml" rel="self"/>
  <link href="http://natedickson.com/"/>
  <updated>2014-10-06T15:33:42-06:00</updated>
  <id>http://natedickson.com/</id>
  <author>
    <name><![CDATA[Nate Dickson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Vim and Scrivener Together]]></title>
    <link href="http://natedickson.com/blog/2014/07/02/using-vim-and-scrivener-together/"/>
    <updated>2014-07-02T15:50:25-06:00</updated>
    <id>http://natedickson.com/blog/2014/07/02/using-vim-and-scrivener-together</id>
    <content type="html"><![CDATA[<p>I’ve been working on <a href="http://leanpub.com/painless_tmux">Painless Tmux</a> and trying to apply a lot of what I learned while writing <a href="http://leanpub.com/painless_vim">Painless Vim</a> to make the process easier and more streamlined. </p>

<p>And one of the problems that I’ve been beating my head against is this:</p>

<p>Tables. </p>

<p>Tables in Markdown are a mess. Understandably so, because you’re trying to keep everything nicely lined up in plain text, which just doesn’t happen. Compound that with proportional fonts in Scrivener and you have something that nobody should ever have to look at. There’s a couple of problems here, of course. </p>

<p>The first is that it’s easy for bugs to hide in messy code<sup id="fnref:orText"><a href="#fn:orText" rel="footnote">1</a></sup>, and I’ve had to run my manuscript files through Leanpub’s markdown generator multiple times before I got my tables right. </p>

<p>So: step one: after putting all the data in a table let’s get the table all lined up and looking nice. This is where vim steps in. Specifically, vim with the <a href="https://github.com/godlygeek/tabular">Tabular</a> plugin. </p>

<p>Using Tabular I can turn a table that looks like this:</p>

<pre><code>| Heading 1 | Heading 2 |  
|  ------ | ------ |  
| some text | A second bit o' text |   
| Still more text, this time of a different length | small text	| 
</code></pre>

<p>into this:</p>

<pre><code>| Heading 1                                        | Heading 2            |
| ------                                           | ------               |
| some text                                        | A second bit o' text |
| Still more text, this time of a different length | small text           |
</code></pre>

<p>all by typing <code>:Tab /|</code> in vim<sup id="fnref:learnMore"><a href="#fn:learnMore" rel="footnote">2</a></sup>. </p>

<p>So far so good. But when I paste this back into Scrivener it looks terrible again, because Scrivener uses proportional fonts<sup id="fnref:myScriv"><a href="#fn:myScriv" rel="footnote">3</a></sup>:</p>

<p><img src="/assets/images/kerned-scriv.png" title="Scrivener with proportional text" ></p>

<p>This was an even easier problem to solve, I just didn’t realize it it until today. Scrivener lets you use all kinds of rich text features while writing, all of which it ignores when exporting or compiling your text for output. This means, of course, that I can style my tables with a monospaced font and suddenly they line up the way they were supposed to all along. </p>

<p><img src="/assets/images/monospaced-scriv.png" title="Scrivener with Monospaced text" ></p>

<p>But changing the fonts manually every time I make a table is a drag. Enter the “presets” feature that Scrivener uses. Its basically the Apple “Styles” menu, but enhanced and made more Scrivener-like. All I had to do was highlight the monospaced section, then in the menu go to <code>Format-&gt;Formatting-&gt;New Preset From Selection</code> and now I can make any of my text nicely monospaced with the click of a button. And while I was at it I re-styled the “Body” preset to be the the way I (currently) like it. </p>

<p>So there you have it: a couple of simple, common sense tips for making tables less of a nightmare in your Markdown manuscripts. Enjoy!</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:orText">
      <p>or semantically marked text. Stay with me here.<a href="#fnref:orText" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:learnMore">
      <p>See <a href="http://vimcasts.org/episodes/aligning-text-with-tabular-vim/">Aligning Text with Tabular.vim</a> for a full explanation of how the plugin works. <a href="#fnref:learnMore" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:myScriv">
      <p>Sure, you <em>could</em> use monospaced fonts in Scrivener, but not in <em>my</em> Scrivener. Unless I’m writing code I like my fonts properly kerned, thank you. <a href="#fnref:myScriv" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Scrivener to Leanpub in One Step]]></title>
    <link href="http://natedickson.com/blog/2013/05/30/from-scrivener-to-leanpub-in-one-step/"/>
    <updated>2013-05-30T00:46:00-06:00</updated>
    <id>http://natedickson.com/blog/2013/05/30/from-scrivener-to-leanpub-in-one-step</id>
    <content type="html"><![CDATA[<p>I’m working on <em><a href="https://leanpub.com/painless_vim">Painless Vim</a></em> in <a href="www.literatureandlatte.com/scrivener.php">Scrivener</a>, because I love its organizational capabilities <sup id="fnref:2"><a href="#fn:2" rel="footnote">1</a></sup> …or have I mentioned my love of Scrivener before? (yes)</p>

<p>The problem arises when I want to push my text to <a href="https://leanpub.com">Leanpub</a>. Scrivener has two very good ways to get your text out of Scriv into the world: you can <em>export</em> each text as a file, or you can <em>compile</em> it into a single document ready to send off to a printer. They’ve both got their pros and cons, but to really understand them we need a brief detour into how publishing on Leanpub works:</p>

<h3 id="brief-detour-into-how-publishing-on-leanpub-works">Brief Detour Into How Publishing on Leanpub Works</h3>

<p>to publish your text on Leanpub you put all your chapters or whatever into individual <code>.txt</code> files, which you put into a special Dropbox folder called something like <code>~/Dropbox/name_of_book/manuscript/</code>. then you include a file called <code>Book.txt</code> to tell Leanpub what order the text files should be in when the book is put together. You can also create a <code>Sample.txt</code> file that tells Leanpub which text files to put into a free sample that potential buyers can download, and  a <code>Preview.txt</code> file that lets you just render a specific part of the book to make sure the formatting looks the way you want it. Okay, that’s your brief tutorial on Leanpub.</p>

<p>So, back to getting text out of Scrivener into this folder.</p>

<p>The compile option seems like a great choice at first: it creates a single text file made up of all the text in your document, formatted however you like, and once you’ve created your compile settings it’s a single click operation. </p>

<p>The problem is with the Sample and Preview options. Since your text is all in a single file you can’t pick and choose individual parts of the text to give away for free. You could have two separate compile settings, but that seems very labor intensive.</p>

<p>So, the “export” option is the way to go, right? Every text section in your Scrivener project is exported as a single text file, just like Leanpub wants, you can create <code>Sample.txt</code> and <code>Preview.txt</code> files and everything is good. </p>

<p>Well, one problem. Let’s say  you’ve got your book laid out in Folders instead of as just a list of text files in Scrivener. When it exports your book it creates the full file structure:</p>

<pre><code>Painless Vim
| 
+- Part I
|	|
|	+- Chapter 1.txt
|	+- Chapter2.txt
+- Part II
	|
	+- Chapter 3.txt	 
</code></pre>

<p>And so forth. You get the picture. This is a problem because Leanpub doesn’t do subfolders; you need all the files to be in the root of the <code>manuscript/</code> directory. So, after doing an export from Scrivener I needed a way to flatten out the file system.</p>

<h3 id="enter-automator">Enter Automator</h3>

<p>Here’s the fun part. I could have written a ruby script to go through the exported file and copy all the <code>.txt</code> files to the <code>manuscript</code> folder. But that would have taken <em>minutes</em>. Like, <em>dozens</em> of them. So I decided to once again let Automator have a crack at it.</p>

<p>And it was <strong>easy</strong>. Automator has gotten a lot more useful since last I played with it<sup id="fnref:1"><a href="#fn:1" rel="footnote">2</a></sup>, with things like variables and other things you’d expect from a real scripting environment. What’s more, I was able to set up my workflow as a “folder action”, watching the <code>~/Documents/Painless/</code> folder which I created specifically for this purpose. Now I just tell Scrivener to export into that directory and Automator takes it from there. </p>

<p>The Automator workflow I set up is dead simple:</p>

<ol>
  <li>Save the name of whatever just appeared in <code>Painless</code> in a variable called <code>New Folder</code> <sup id="fnref:names"><a href="#fn:names" rel="footnote">3</a></sup> .</li>
  <li>Get everything in the new folder, recursively</li>
  <li>Filter that list by file extension (in this case, we only want .txt files)</li>
  <li>Copy all those text files to <code>~/Dropbox/painless_vim/manuscript/</code>, overwriting any existing files.</li>
  <li>Delete whatever is stored in <code>incoming</code>. </li>
</ol>

<p>And there you have it. The last step is just to make the export from Scrivener one step shorter, because it doesn’t have to ask if you want to overwrite your last export.</p>

<p>There are a lot of advantages to this setup. I can now export a single text file or folder instead of the entire project, and just that file will get overwritten. For single file exports this is nearly instantaneous, opposed to the <em>three whole seconds</em> it takes to export my entire project.  I  can also have <em>all</em> my files, including my <code>Book.txt, Sample.txt</code> and <code>Preview.txt</code> managed in Scrivener, which I couldn’t do if I were doing the Compile option. </p>

<p>Over all I’m very pleased with this workflow. It’s taken one of the pain points out of writing <em>Painless Vim</em>. </p>

<div class="footnotes">
  <ol>
    <li id="fn:2">
      <p>Okay, I know it seems odd that I’m writing a book called <em>Painless Vim</em> and here I am admitting that I’m using a completely different editor to write it. What’s the deal here? The deal is that it’s really easy to copy and paste text around between editors (especially using Hog Bay’s <a href="http://www.hogbaysoftware.com/products/quickcursor">QuickCursor</a>, but that’s an entirely different footnote), and while I do most of the actual writing in vim, I keep the text files in Scrivener for reasons that will be expounded upon in a future blog post.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:1">
      <p>at least four years ago<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:names">
      <p>Let’s not make fun of bad variable names here, Thank you so much.<a href="#fnref:names" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Originally About Scrivener but Turned into Something Else]]></title>
    <link href="http://natedickson.com/blog/2013/03/25/originally-about-scrivener-but-turned-into-something-else/"/>
    <updated>2013-03-25T12:09:00-06:00</updated>
    <id>http://natedickson.com/blog/2013/03/25/originally-about-scrivener-but-turned-into-something-else</id>
    <content type="html"><![CDATA[<p>I have been a huge fan of <a href="http://www.literatureandlatte.com/scrivener.php">Scrivener</a> for years. I love the freedom it gives me to organize a story however I want it, to color code, label, sort, search and tag my text.</p>

<p>But all of this, of course, can actually <em>hamper</em> productivity if you start letting it run your workflow. You can spend so much time going through your manuscript updating keywords that you forget to actually do any writing. This trap is especially easy to fall into if you, like me, suffer from a serious mental condition called <em>“Self-inflicted Terminal Unjustified Paranoia of Invisible Detractors”</em>, or <strong>STUPID</strong> for short.</p>

<p>STUPID is a condition where you believe that someone, somewhere is looking over your shoulder and judging what you’re doing to be of no worth, that someone is picking apart your workflow and finds it erratic and inefficient, or that someone will take a look at how you are using  your tool of choice and pick all your decisions apart. </p>

<p>If left untreated, STUPID can cause you to dry up, stop being creative, and spend excessive amounts of time worrying about productivity instead of actually <em>being</em> productive.</p>

<p>STUPID is rampant in people who consider themselves internet denizens; people like bloggers, authors, and creative professionals. But STUPID is older than the internet, and has been affecting similar personality types for years. Early warning signs for the onset of STUPID include dithering around with todo list software, pomodoro spreadsheets, and other such things that are meant to help you be more productive. In its advanced stages the victim may need to be given a management style job. </p>

<p>Once a case of STUPID is self diagnosed (and it can only be <em>self</em>-diagnosed; external diagnoses are worthless. ) the treatment is fortunately inexpensive. In mild cases most practitioners recommend a quiet walk followed by some time spent in a free write scenario, where the victim is forced to <em>just keep producing</em> without listening to their internal critic. A standard therapeutic session should last for at least half an hour. This treatment should be continued for life, as it has also been found to be an effective preventative. </p>

<p>Very little of this has to do with Scrivener, of course. I meant to write an article about using Scrivener to actually do productive work, but I got sidetracked thinking about how to use it more productively. </p>

]]></content>
  </entry>
  
</feed>
